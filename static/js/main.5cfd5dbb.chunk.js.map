{"version":3,"sources":["Homepage.js","lights-out/Cell.js","lights-out/Board.js","lights-out/Lightsout.js","weather/Form.js","weather/Titles.js","weather/WeatherConditions.js","apiconfig.js","weather/Weather.js","NotFound.js","Routes.js","NavBarFancy.js","App.js","serviceWorker.js","index.js"],"names":["Homepage","className","Component","Cell","props","handleClick","bind","evt","this","handleCellClick","target","getAttribute","classes","isLit","computedWidth","Math","floor","width","styles","paddingBottom","style","onClick","pos","getRandomInt","max","random","Board","state","board","constructBoard","nrows","ncols","clicks","hasWon","handleResetBoardClick","handleResetGameClick","handleNextboardClick","setBoard","console","log","number","coords","i","coord","push","flipCellsAround","row","o","split","map","Number","y","x","flipCell","flipCellSurroundings","setState","checkWin","repeats","setBoardStage","incrBoardNmbr","resetGame","Fragment","yitem","yindex","trid","key","xitem","xindex","height","defaultProps","initializationRepeats","Lightsout","boardNumber","sessionStorage","getItem","setItem","renderableBoards","length","Form","onSubmit","loadWeather","id","type","name","placeholder","Titles","Weather","country","city","temperature","humidity","windspeed","description","error","apiconfig","WEATHER_API_KEY","undefined","getWeather","e","a","preventDefault","elements","value","fetch","api_call","json","response","cod","main","temp","sys","wind","speed","weather","JSON","stringify","parse","WeatherConditions","NotFound","Routes","exact","path","render","NavbarFancy","to","data-toggle","data-target","aria-controls","aria-expanded","aria-label","App","NavBarFancy","Boolean","window","location","hostname","match","ReactDOM","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5cfd5dbb.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\n/** Main page used to display created apps*/\r\n\r\nclass Homepage extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className='Homepage'>\r\n                <h1>This is a homepage</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Homepage;\r\n","import React, {Component} from 'react'\r\n\r\nimport \"./Cell.css\"\r\n\r\n/** A single cell on the board.\r\n *\r\n * This has no state --- just two props:\r\n *\r\n * - handleCellClick: a function rec'd from the board which ultimately flips this\r\n *      cell and the cells around of it\r\n *\r\n * - isLit: boolean, is this cell lit?\r\n *\r\n * This handles clicks --- by calling handleCellClick\r\n *\r\n **/\r\n\r\nclass Cell extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick(evt) {\r\n    // call up to the Board to flip the cell and cells around this cell\r\n    this.props.handleCellClick(evt.target.getAttribute('pos'));\r\n  }\r\n\r\n  render() {\r\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\r\n    let computedWidth = Math.floor(100 / this.props.width)\r\n    let styles = {\r\n        width: `${computedWidth}%`,\r\n        paddingBottom: `${computedWidth}%`\r\n    }\r\n    return (\r\n        <td \r\n        className={classes} \r\n        style={styles}\r\n        onClick={this.handleClick} \r\n        pos={this.props.pos} \r\n        />\r\n    )\r\n  }\r\n}\r\n\r\n// cell\r\n\r\n\r\nexport default Cell","import React, { Component } from \"react\";\r\n\r\nimport Cell from \"./Cell\";\r\nimport './Board.css';\r\n\r\nfunction getRandomInt(max) {\r\n    return Math.floor(Math.random() * Math.floor(max));\r\n}\r\n\r\n/** Game board of Lights out.\r\n *\r\n * Properties:\r\n *\r\n * - nrows: number of rows of board\r\n * - ncols: number of cols of board\r\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\r\n *\r\n * State:\r\n *\r\n * - hasWon: boolean, true when board is all off\r\n * - board: array-of-arrays of true/false\r\n *\r\n *    For this board:\r\n *       .  .  .\r\n *       O  O  .     (where . is off (false), and O is on(true))\r\n *       .  .  .\r\n *\r\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\r\n *\r\n *  This should render an HTML table of individual <Cell /> components.\r\n *\r\n *  This doesn't handle any clicks --- clicks are on individual cells\r\n *\r\n **/\r\n\r\n// Miten statea kannattaa käyttää:\r\n// https://www.freecodecamp.org/news/get-pro-with-react-setstate-in-10-minutes-d38251d1c781/\r\n\r\nclass Board extends Component {\r\n\r\n    static defaultProps = {\r\n        nrows: 4,\r\n        ncols: 4,\r\n        initializationRepeats: 5\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            board: this.constructBoard(this.props.nrows, this.props.ncols),\r\n            clicks: 0,\r\n            hasWon: false\r\n        };\r\n        this.handleCellClick = this.handleCellClick.bind(this);\r\n        this.handleResetBoardClick = this.handleResetBoardClick.bind(this);\r\n        this.handleResetGameClick = this.handleResetGameClick.bind(this);\r\n        this.handleNextboardClick = this.handleNextboardClick.bind(this);\r\n    }\r\n\r\n    // Suoritetaan constructorin toimien jälkeen boardin asettelu, ennen itse sisällön renderöimistä\r\n    // https://reactjs.org/docs/react-component.html\r\n    componentDidMount() {\r\n        this.setBoard();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        console.log(\"Board-component unmounting...\")\r\n    }\r\n\r\n\r\n    setBoardStage(number) {\r\n        let coords = []\r\n\r\n        let i = 0;\r\n        do {\r\n            let coord = `${getRandomInt(this.props.ncols)}-${getRandomInt(this.props.nrows)}`;\r\n            coords.push(coord);\r\n            this.flipCellsAround(coord);\r\n            i++;\r\n        } while (i < number);\r\n\r\n        console.log(coords);\r\n    }\r\n\r\n    /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\r\n\r\n    constructBoard(nrows, ncols) {\r\n\r\n        let board = [];\r\n        for (let i = 0; i < nrows; i++) {\r\n            let row = [];\r\n            for (let o = 0; o < ncols; o++) {\r\n                row.push(false);\r\n            }\r\n            board.push(row);\r\n        }\r\n        return board\r\n    }\r\n\r\n    /**\r\n     * Handles changing of cells to opposites\r\n     * Determines if the board has been cleared (Victory)\r\n     * Updates the board\r\n     * @param {string} coord (e.g. \"2-3\", \"0-1\") \r\n     */\r\n    flipCellsAround(coord) {\r\n\r\n        let { ncols, nrows } = this.props;\r\n        // let ncols = this.props.ncols;\r\n        // let nrows = this.props.nrows;\r\n        let board = this.state.board;\r\n        let [y, x] = coord.split(\"-\").map(Number);\r\n\r\n        function flipCell(y, x) {\r\n            // if this coord is actually on board, flip it\r\n            if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\r\n                board[y][x] = !board[y][x];\r\n            }\r\n        }\r\n        function flipCellSurroundings(y, x) {\r\n\r\n            let top = [y + 1, x];\r\n            let bottom = [y - 1, x];\r\n            let right = [y, x + 1];\r\n            let left = [y, x - 1];\r\n            let sArray = [top, bottom, right, left];\r\n\r\n            for (let i of sArray) {\r\n                // if the surrounding coord is in the board, flip it\r\n                if (i[1] >= 0 && i[1] < ncols && i[0] >= 0 && i[0] < nrows) {\r\n                    board[i[0]][i[1]] = !board[i[0]][i[1]];\r\n                }\r\n            }\r\n        }\r\n\r\n        flipCell(y, x);\r\n        flipCellSurroundings(y, x);\r\n\r\n        function checkWin(board) {\r\n            // toinen tapa tehdä loop-break, nimeämällä eri for-loopin tasot\r\n            // loop1:\r\n            // for (let i of board) {\r\n            //     for (let u of i) {\r\n            //         if (u === true) { break loop1};\r\n            //     }\r\n            //     ...\r\n            // }\r\n\r\n            for (let i of board) {\r\n                for (let u of i) {\r\n                    if (u === true) { return false };\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n\r\n        this.setState({\r\n            board: board,\r\n            hasWon: checkWin(board)\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * @param {number} repeats (number of pre-made clicks before player interaction)\r\n     */\r\n    setBoard(repeats = 5) {\r\n        this.setBoardStage(repeats);\r\n    }\r\n\r\n    /**\r\n     * Call flipCellsAround and increases number of clicks used\r\n     * TODO: use number of clicks to something useful\r\n     * @param {string} coord (e.g. \"2-3\", \"0-1\") \r\n     */\r\n    handleCellClick(coord) {\r\n        this.flipCellsAround(coord);\r\n        this.setState(state => {\r\n            return {\r\n                clicks: state.clicks + 1\r\n            }\r\n        })\r\n    }\r\n    handleResetBoardClick() {\r\n        this.setState({\r\n            board: this.constructBoard(this.props.nrows, this.props.ncols),\r\n            clicks: 0,\r\n            hasWon: false\r\n        }, () => {\r\n            this.setBoard();\r\n        });\r\n    }\r\n    handleNextboardClick() {\r\n        this.props.incrBoardNmbr();\r\n    }\r\n    handleResetGameClick() {\r\n        this.props.resetGame();\r\n    }\r\n\r\n\r\n    /** Render game board or winning message. */\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.hasWon ?\r\n                    <h2>\r\n                        Voitit laudan {this.props.nrows + \"x\" + this.props.ncols}\r\n                        <button onClick={this.handleNextboardClick}>Next board</button>\r\n                    </h2>\r\n                    :\r\n                    <React.Fragment>\r\n                        <h1>Lights out - {this.props.nrows + \"x\" + this.props.ncols}</h1>\r\n                        <table className=\"Board\">\r\n                            <tbody>\r\n                                {this.state.board.map((yitem, yindex) => {\r\n                                    let trid = `tr${yindex}`\r\n                                    return <tr key={trid}>\r\n                                        {yitem.map((xitem, xindex) => {\r\n                                            let coord = `${yindex}-${xindex}`;\r\n                                            return <Cell\r\n                                                key={coord}\r\n                                                pos={coord}\r\n                                                isLit={xitem}\r\n                                                width={this.props.ncols}\r\n                                                height={this.props.nrows}\r\n                                                handleCellClick={this.handleCellClick}\r\n                                            />\r\n                                        })}\r\n                                    </tr>\r\n                                })}\r\n                            </tbody>\r\n                        </table>\r\n                    </React.Fragment>\r\n                }\r\n                <button onClick={this.handleResetBoardClick}>Reset board</button>\r\n                <button onClick={this.handleResetGameClick}>Reset game</button>\r\n\r\n            </div>\r\n        );\r\n\r\n        // make table board\r\n\r\n        // TODO\r\n\r\n        // board\r\n    }\r\n}\r\n\r\n\r\nexport default Board;\r\n","import React, { Component } from \"react\";\r\nimport Board from \"./Board\";\r\n\r\n/** Simple app that just shows the LightsOut game. */\r\nclass Lightsout extends Component {\r\n\r\n    // Conditional state assign: https://www.freecodecamp.org/forum/t/conditional-setstate/242667/3\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            boardNumber: sessionStorage.getItem(\"boardNumber\") || 0\r\n        };\r\n\r\n        this.incrBoardNmbr = this.incrBoardNmbr.bind(this);\r\n        this.resetGame = this.resetGame.bind(this);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        console.log(\"Lightsout-component unmounting...\")\r\n    }\r\n\r\n    // static defaultProps = {\r\n    //     renderableBoards: [\r\n    //         <Board nrows={3} ncols={3} key=\"hard\" incrBoardNmbr={this.incrBoardNmbr} />,\r\n    //         <Board nrows={4} ncols={4} key=\"coded\" incrBoardNmbr={this.incrBoardNmbr} />,\r\n    //         <Board nrows={5} ncols={5} key=\"keys\" incrBoardNmbr={this.incrBoardNmbr} />\r\n    //     ]\r\n    // }\r\n\r\n    /**\r\n     * Increases board number to display next game board and saves that board's number to sessionStorage in setstate callback\r\n     */\r\n    incrBoardNmbr() {\r\n        this.setState(state => ({\r\n            boardNumber: Number(state.boardNumber) + 1\r\n        }), () => {\r\n            sessionStorage.setItem(\"boardNumber\", this.state.boardNumber)\r\n        })\r\n    }\r\n    resetGame() {\r\n        this.setState({\r\n            boardNumber: 0\r\n        }, () => {\r\n            sessionStorage.setItem(\"boardNumber\", 0)\r\n            console.log(\"storage resetoinnin jälkeen: \" + sessionStorage.getItem(\"boardNumber\"))\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Renders the currently wanted board, selection made based on index position of board in array\r\n     */\r\n    render() {\r\n        let renderableBoards = [\r\n            <Board nrows={3} ncols={3} key=\"hard\" incrBoardNmbr={this.incrBoardNmbr} resetGame={this.resetGame} />,\r\n            <Board nrows={4} ncols={4} key=\"coded\" incrBoardNmbr={this.incrBoardNmbr} resetGame={this.resetGame} />,\r\n            <Board nrows={5} ncols={5} key=\"keys\" incrBoardNmbr={this.incrBoardNmbr} resetGame={this.resetGame} />\r\n        ]\r\n        console.log(\"state: \" + this.state.boardNumber)\r\n        console.log(\"sessionstorage: \" + sessionStorage.getItem(\"boardNumber\"))\r\n        return (\r\n            <div className='Lightsout'>\r\n                {this.state.boardNumber < renderableBoards.length ?\r\n                    renderableBoards[this.state.boardNumber]\r\n                    :\r\n                    <React.Fragment>\r\n                        <h1>Games won, good job!</h1>\r\n                        <button onClick={this.resetGame}>Reset game</button>\r\n                    </React.Fragment>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Lightsout;\r\n\r\n// old map\r\n// {this.props.renderableBoards.map((item, i) => {\r\n//     if (i === this.state.renderedBoard) {\r\n//         return item\r\n//     }\r\n//     else return null\r\n// })}\r\n\r\n// lightsout\r\n","import React from 'react';\r\n\r\nconst Form = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.loadWeather} className=\"WeatherForm\">\r\n            <input id=\"input_city\" type=\"text\" name=\"city\" placeholder=\"City...\" />\r\n            <input id=\"input_country\" type=\"text\" name=\"country\" placeholder=\"Country...\" />\r\n            <button>Get Weather</button>\r\n        </form>\r\n    )\r\n}\r\n\r\n//form\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nconst Titles = (props) => {\r\n    return (\r\n        <div>\r\n            <h1>Weather App </h1>\r\n            <p> Helps you find weather conditions in cities </p>\r\n        </div>\r\n    )\r\n}\r\n\r\n// titles\r\n\r\nexport default Titles;","import React from 'react';\r\n\r\nconst Weather = (props) => {\r\n    return (\r\n        <div>\r\n            {props.country && props.city && <p>Location: {props.city}, {props.country}</p>}\r\n            {props.temperature && <p>Temperature: {props.temperature} C</p>}\r\n            {props.humidity && <p>Humidity: {props.humidity}%</p>}\r\n            {props.windspeed && <p>Wind speed:  {props.windspeed} m/s</p>}\r\n            {props.description && <p>Conditions:  {props.description}</p>}\r\n            {props.error && <p>{props.error}</p>}\r\n        </div>\r\n    )\r\n}\r\n\r\n// weatherconditions\r\n\r\nexport default Weather;","const apiconfig = {\n    WEATHER_API_KEY: \"b5feaab89a9d1e1a3ac94913272343b6\"\n}\n\nexport default apiconfig;","import React, { Component } from \"react\";\r\n\r\nimport Form from './Form';\r\nimport Titles from './Titles';\r\nimport WeatherConditions from './WeatherConditions';\r\n\r\nimport \"./Weather.css\";\r\nimport apiconfig from '../apiconfig';\r\n\r\n// example api call: http://api.openweathermap.org/data/2.5/find?q=London&units=metric&appid={apiconfig.WEATHER_API_KEY}\r\n// inspiration: https://medium.com/@peterekeneeze/build-a-react-js-weather-app-with-stateless-functional-components-e61567004b54\r\n\r\n/** Simple app that fetches weather information from OpenWeatherMap API and displays it */\r\nclass Weather extends Component {\r\n\r\n    state = {\r\n        temperature: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        humidity: undefined,\r\n        windspeed: undefined,\r\n        description: undefined,\r\n        error: undefined,\r\n    }\r\n\r\n    /**\r\n     * Load the existing weather forecast, ignored if not done already\r\n     */\r\n    componentDidMount() {\r\n\r\n        let response = JSON.parse(sessionStorage.getItem(\"weatherData\"))\r\n\r\n        if (response) {\r\n            this.setState({\r\n                temperature: response.main.temp || \"Not available\",\r\n                city: response.name || \"Not available\",\r\n                country: response.sys.country || \"Not available\",\r\n                humidity: response.main.humidity || \"Not available\",\r\n                windspeed: response.wind.speed || \"Not available\",\r\n                description: response.weather[0].description || \"Not available\",\r\n                error: \"\"\r\n            })\r\n        }\r\n    }\r\n\r\n    getWeather = async (e) => {\r\n        e.preventDefault();\r\n\r\n        const city = e.target.elements.city.value;\r\n        const country = e.target.elements.country.value;\r\n\r\n        if (city && country) {\r\n\r\n            const prefix = \"https://cors-anywhere.herokuapp.com/\" // enables http openweathermap content over https, temporate solution\r\n            const api_call = await fetch(`${prefix}http://api.openweathermap.org/data/2.5/weather?lang=fi&q=${city},${country}&units=metric&appid=${apiconfig.WEATHER_API_KEY}`)\r\n            const response = await api_call.json();\r\n\r\n            if (response.cod === 200) { // response code of delivery OK\r\n                this.setState({\r\n                    temperature: response.main.temp || \"Not available\",\r\n                    city: response.name || \"Not available\",\r\n                    country: response.sys.country || \"Not available\",\r\n                    humidity: response.main.humidity || \"Not available\",\r\n                    windspeed: response.wind.speed || \"Not available\",\r\n                    description: response.weather[0].description || \"Not available\",\r\n                    error: \"\"\r\n                }, () => {\r\n                    sessionStorage.setItem(\"weatherData\", JSON.stringify(response))\r\n                }\r\n                )\r\n            } else {\r\n                this.setState({\r\n                    error: \"Searched city or country not found\"\r\n                })\r\n            }\r\n        } else {\r\n            this.setState({\r\n                error: \"Please enter the values\"\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <h1>This is a weather page</h1>\r\n                <div className='Weather'>\r\n                    <Titles />\r\n                    <Form loadWeather={this.getWeather} />\r\n                    <WeatherConditions\r\n                        temperature={this.state.temperature}\r\n                        city={this.state.city}\r\n                        country={this.state.country}\r\n                        humidity={this.state.humidity}\r\n                        description={this.state.description}\r\n                        windspeed={this.state.windspeed}\r\n                        error={this.state.error} />\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\n// weather\r\n\r\nexport default Weather;\r\n","import React, { Component } from 'react';\r\n\r\nclass NotFound extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {}\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"NotFound\">\r\n                <div>Target page not found!</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NotFound;","import React, { Component } from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\n\r\nimport Homepage from \"./Homepage\";\r\nimport Lightsout from \"./lights-out/Lightsout\";\r\nimport Weather from \"./weather/Weather\";\r\n\r\nimport NotFound from './NotFound';\r\n\r\nclass Routes extends Component {\r\n    render() {\r\n        return (\r\n            <Switch>\r\n                <Route exact path=\"/\" render={() => <Homepage />} />\r\n                <Route exact path=\"/lights-out\" render={() => <Lightsout />} />\r\n                <Route exact path=\"/weather\" render={() => <Weather />} />\r\n                <Route render={() => <NotFound />} />\r\n            </Switch>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Routes;\r\n","import React, { Component } from \"react\";\r\nimport { NavLink, Link } from \"react-router-dom\";\r\n\r\nclass NavbarFancy extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <nav className='navbar navbar-expand-lg navbar-dark bg-dark'>\r\n                <Link className='navbar-brand' to={'/'}>\r\n                    Info app\r\n                </Link>\r\n\r\n                <button\r\n                    className='navbar-toggler'\r\n                    type='button'\r\n                    data-toggle='collapse'\r\n                    data-target='#navbarNav'\r\n                    aria-controls='navbarNav'\r\n                    aria-expanded='false'\r\n                    aria-label='Toggle navigation'\r\n                >\r\n                    <span className='navbar-toggler-icon' />\r\n                </button>\r\n                <div className='collapse navbar-collapse' id='navbarNav'>\r\n                    <ul className='navbar-nav'>\r\n                        <li className='nav-item'>\r\n                            <NavLink exact to={'/'} className='nav-link'>\r\n                                Home\r\n                            </NavLink>\r\n                        </li>\r\n                        <li className='nav-item'>\r\n                            <NavLink exact to={`/lights-out`} className='nav-link'>\r\n                                Lights out\r\n                            </NavLink>\r\n                        </li>\r\n                        <li className='nav-item'>\r\n                            <NavLink exact to={`/weather`} className='nav-link'>\r\n                                Weather\r\n                            </NavLink>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\nexport default NavbarFancy;\r\n","import React, { Component } from \"react\";\r\nimport Routes from './Routes';\r\nimport NavBarFancy from './NavBarFancy';\r\nimport \"./App.css\";\r\n\r\n/** Simple app that renders few interesting components */\r\n\r\nclass App extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className='App'>\r\n                <NavBarFancy />\r\n                <Routes />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport \"bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\"\r\n\r\nimport './index.css';\r\nimport { BrowserRouter, HashRouter } from 'react-router-dom'\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// Solution to github pages routing problem (inclusion of \"basename\" parameter): \r\n// https://medium.com/@Dragonza/react-router-problem-with-gh-pages-c93a5e243819\r\n// Hashrouter fixing the refresh 404 problem\r\n// https://stackoverflow.com/questions/46056414/getting-404-for-links-with-create-react-app-deployed-to-github-pages\r\nReactDOM.render(\r\n    <HashRouter basename={process.env.PUBLIC_URL}>\r\n        <App />\r\n    </HashRouter>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}