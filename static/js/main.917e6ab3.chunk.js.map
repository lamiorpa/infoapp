{"version":3,"sources":["Homepage.js","lights-out/Cell.js","lights-out/Board.js","lights-out/Lightsout.js","weather/Form.js","weather/Titles.js","weather/WeatherConditions.js","weather/Weather.js","NotFound.js","Routes.js","NavBarFancy.js","App.js","serviceWorker.js","index.js"],"names":["Homepage","className","Component","Cell","props","handleClick","bind","evt","this","handleCellClick","target","getAttribute","classes","isLit","computedWidth","Math","floor","width","styles","paddingBottom","style","onClick","pos","getRandomInt","max","random","Board","state","board","constructBoard","nrows","ncols","clicks","hasWon","handleNextboardClick","setBoard","console","log","number","coords","i","coord","push","flipCellsAround","row","o","split","map","Number","y","x","flipCell","flipCellSurroundings","setState","checkWin","repeats","setBoardStage","incrBoardNmbr","Fragment","yitem","yindex","trid","key","xitem","xindex","height","defaultProps","initializationRepeats","Lightsout","renderedBoard","renderableBoards","sessionStorage","getItem","Form","onSubmit","loadWeather","type","name","placeholder","Titles","Weather","WeatherConditions","NotFound","Routes","exact","path","render","NavbarFancy","to","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","App","NavBarFancy","Boolean","window","location","hostname","match","ReactDOM","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.917e6ab3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\n/** Main page used to display created apps*/\n\nclass Homepage extends Component {\n\n    render() {\n        return (\n            <div className='Homepage'>\n                <h1>This is a homepage</h1>\n            </div>\n        );\n    }\n}\n\nexport default Homepage;\n","import React, {Component} from 'react'\n\nimport \"./Cell.css\"\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - handleCellClick: a function rec'd from the board which ultimately flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling handleCellClick\n *\n **/\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n    // call up to the Board to flip the cell and cells around this cell\n    this.props.handleCellClick(evt.target.getAttribute('pos'));\n  }\n\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n    let computedWidth = Math.floor(100 / this.props.width)\n    let styles = {\n        width: `${computedWidth}%`,\n        paddingBottom: `${computedWidth}%`\n    }\n    return (\n        <td \n        className={classes} \n        style={styles}\n        onClick={this.handleClick} \n        pos={this.props.pos} \n        />\n    )\n  }\n}\n\n\nexport default Cell","import React, { Component } from \"react\";\n\nimport Cell from \"./Cell\";\nimport './Board.css';\n\nfunction getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n}\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off (false), and O is on(true))\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\n// Miten statea kannattaa käyttää:\n// https://www.freecodecamp.org/news/get-pro-with-react-setstate-in-10-minutes-d38251d1c781/\n\nclass Board extends Component {\n\n    static defaultProps = {\n        nrows: 4,\n        ncols: 4,\n        initializationRepeats: 5\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            board: this.constructBoard(this.props.nrows, this.props.ncols),\n            clicks: 0,\n            hasWon: false\n        };\n        this.handleCellClick = this.handleCellClick.bind(this);\n        this.handleNextboardClick = this.handleNextboardClick.bind(this);\n    }\n\n    // Suoritetaan constructorin toimien jälkeen boardin asettelu, ennen itse sisällön renderöimistä\n    // https://reactjs.org/docs/react-component.html\n    componentDidMount() {\n        this.setBoard();\n    }\n\n    componentWillUnmount() {\n        console.log(\"Component unmounting...\")\n    }\n\n\n    setBoardStage(number) {\n        let coords = []\n\n        let i = 0;\n        do {\n            let coord = `${getRandomInt(this.props.ncols)}-${getRandomInt(this.props.nrows)}`;\n            coords.push(coord);\n            this.flipCellsAround(coord);\n            i++;\n        } while (i < number);\n\n        console.log(coords);\n    }\n\n    /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n    constructBoard(nrows, ncols) {\n\n        let board = [];\n        for (let i = 0; i < nrows; i++) {\n            let row = [];\n            for (let o = 0; o < ncols; o++) {\n                row.push(false);\n            }\n            board.push(row);\n        }\n        return board\n    }\n\n    /**\n     * Handles changing of cells to opposites\n     * Determines if the board has been cleared (Victory)\n     * Updates the board\n     * @param {string} coord (e.g. \"2-3\", \"0-1\") \n     */\n    flipCellsAround(coord) {\n\n        let { ncols, nrows } = this.props;\n        // let ncols = this.props.ncols;\n        // let nrows = this.props.nrows;\n        let board = this.state.board;\n        let [y, x] = coord.split(\"-\").map(Number);\n\n        function flipCell(y, x) {\n            // if this coord is actually on board, flip it\n            if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n                board[y][x] = !board[y][x];\n            }\n        }\n        function flipCellSurroundings(y, x) {\n\n            let top = [y + 1, x];\n            let bottom = [y - 1, x];\n            let right = [y, x + 1];\n            let left = [y, x - 1];\n            let sArray = [top, bottom, right, left];\n\n            for (let i of sArray) {\n                // if the surrounding coord is in the board, flip it\n                if (i[1] >= 0 && i[1] < ncols && i[0] >= 0 && i[0] < nrows) {\n                    board[i[0]][i[1]] = !board[i[0]][i[1]];\n                }\n            }\n        }\n\n        flipCell(y, x);\n        flipCellSurroundings(y, x);\n\n        function checkWin(board) {\n            // toinen tapa tehdä loop-break, nimeämällä eri for-loopin tasot\n            // loop1:\n            // for (let i of board) {\n            //     for (let u of i) {\n            //         if (u === true) { break loop1};\n            //     }\n            //     ...\n            // }\n\n            for (let i of board) {\n                for (let u of i) {\n                    if (u === true) { return false };\n                }\n            }\n            return true;\n        }\n\n        this.setState({\n            board: board,\n            hasWon: checkWin(board)\n        });\n\n    }\n\n    /**\n     * @param {number} repeats (number of pre-made clicks before player interaction)\n     */\n    setBoard(repeats = 5) {\n        this.setBoardStage(repeats);\n    }\n\n    /**\n     * Call flipCellsAround and increases number of clicks used\n     * TODO: use number of clicks to something useful\n     * @param {string} coord (e.g. \"2-3\", \"0-1\") \n     */\n    handleCellClick(coord) {\n        this.flipCellsAround(coord);\n        this.setState(state => {\n            return {\n                clicks: state.clicks + 1\n            }\n        })\n    }\n    \n    handleNextboardClick() {\n        this.props.incrBoardNmbr();\n    }\n\n    /** Render game board or winning message. */\n\n    render() {\n        return (\n            <div>\n                {this.state.hasWon ?\n                    <h2>\n                        Voitit laudan {this.props.nrows + \"x\" + this.props.ncols} \n                        <p><button onClick={this.handleNextboardClick}>Next board</button></p>\n                    </h2>\n                    :\n                    <React.Fragment>\n                        <h1>Lights out - {this.props.nrows + \"x\" + this.props.ncols}</h1>\n                        <table className=\"Board\">\n                            <tbody>\n                                {this.state.board.map((yitem, yindex) => {\n                                    let trid = `tr${yindex}`\n                                    return <tr key={trid}>\n                                        {yitem.map((xitem, xindex) => {\n                                            let coord = `${yindex}-${xindex}`;\n                                            return <Cell\n                                                key={coord}\n                                                pos={coord}\n                                                isLit={xitem}\n                                                width={this.props.ncols}\n                                                height={this.props.nrows}\n                                                handleCellClick={this.handleCellClick}\n                                            />\n                                        })}\n                                    </tr>\n                                })}\n                            </tbody>\n                        </table>\n                    </React.Fragment>\n                }\n\n            </div>\n        );\n\n        // make table board\n\n        // TODO\n    }\n}\n\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass Lightsout extends Component {\n\n    // Conditional state assign: https://www.freecodecamp.org/forum/t/conditional-setstate/242667/3\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            renderedBoard: 0\n        };\n        this.incrBoardNmbr = this.incrBoardNmbr.bind(this);\n    }\n\n    incrBoardNmbr() {\n        this.setState(state => ({\n            renderedBoard: state.renderedBoard + 1\n        }))\n        // TODO: make the app remember lastly played board using sessionstorage\n    }\n\n    /**\n     * Renders the currently wanted board, selection made based on index position of board in array\n     */\n    render() {\n        let renderableBoards = [\n            <Board nrows={3} ncols={3} key=\"hard\" incrBoardNmbr={this.incrBoardNmbr} />,\n            <Board nrows={4} ncols={4} key=\"coded\" incrBoardNmbr={this.incrBoardNmbr} />,\n            <Board nrows={5} ncols={5} key=\"keys\" incrBoardNmbr={this.incrBoardNmbr} />\n        ]\n        console.log(\"state: \" + this.state.renderedBoard)\n        console.log(\"sessionstorage: \" + sessionStorage.getItem(\"boardNumber\"))\n        return (\n            <div className='Lightsout'>\n                {renderableBoards[this.state.renderedBoard]}\n            </div>\n        );\n    }\n}\n\nexport default Lightsout;\n\n// old map\n// {this.props.renderableBoards.map((item, i) => {\n//     if (i === this.state.renderedBoard) {\n//         return item\n//     }\n//     else return null\n// })}\n","import React from 'react';\n\nconst Form = (props) => {\n    return (\n        <form onSubmit={props.loadWeather}>\n            <input type=\"text\" name=\"city\" placeholder=\"City...\" />\n            <input type=\"text\" name=\"country\" placeholder=\"Country...\" />\n            <button>Get Weather</button>\n        </form>\n    )\n}\nexport default Form;","import React from 'react';\n\nconst Titles = (props) => {\n    return (\n        <div>\n            <h1>Weather App </h1>\n            <p> Helps you find weather conditions in cities... </p>\n        </div>\n    )\n}\nexport default Titles;","import React from 'react';\n\nconst Weather = (props) => {\n    return (\n        <div>\n            weather conditions goes here\n        </div>\n    )\n}\n\nexport default Weather;","import React, { Component } from \"react\";\n\nimport Form from './Form';\nimport Titles from './Titles';\nimport WeatherConditions from './WeatherConditions';\n\n/** Simple app that fetches weather information from OpenWeatherMap API and displays it */\n\n// example api call: http://api.openweathermap.org/data/2.5/find?q=London&units=metric&appid=b5feaab89a9d1e1a3ac94913272343b6\n// inspiration: https://medium.com/@peterekeneeze/build-a-react-js-weather-app-with-stateless-functional-components-e61567004b54\nclass Weather extends Component {\n\n    render() {\n        return (\n            <div className='Weather'>\n                <h1>This is a weather page</h1>\n                <Titles />\n                <Form />\n                <WeatherConditions />\n            </div>\n        );\n    }\n}\n\nexport default Weather;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n    render() {\n        return (\n            <div className=\"Dogs\">\n                <div>Dog not found!</div>\n            </div>\n        );\n    }\n}\n\nexport default NotFound;","import React, { Component } from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\n\nimport Homepage from \"./Homepage\";\nimport Lightsout from \"./lights-out/Lightsout\";\nimport Weather from \"./weather/Weather\";\n\nimport NotFound from './NotFound';\n\nclass Routes extends Component {\n    render() {\n        return (\n            <Switch>\n                <Route exact path=\"/\" render={() => <Homepage />} />\n                <Route exact path=\"/lights-out\" render={() => <Lightsout />} />\n                <Route exact path=\"/weather\" render={() => <Weather />} />\n                <Route render={() => <NotFound />} />\n            </Switch>\n        );\n    }\n}\n\nexport default Routes;\n","import React, { Component } from \"react\";\nimport { NavLink, Link } from \"react-router-dom\";\n\nclass NavbarFancy extends Component {\n\n    render() {\n        return (\n            <nav className='navbar navbar-expand-lg navbar-dark bg-dark'>\n                <Link className='navbar-brand' to={'/'}>\n                    Info app\n                </Link>\n\n                <button\n                    className='navbar-toggler'\n                    type='button'\n                    data-toggle='collapse'\n                    data-target='#navbarNav'\n                    aria-controls='navbarNav'\n                    aria-expanded='false'\n                    aria-label='Toggle navigation'\n                >\n                    <span className='navbar-toggler-icon' />\n                </button>\n                <div className='collapse navbar-collapse' id='navbarNav'>\n                    <ul className='navbar-nav'>\n                        <li className='nav-item'>\n                            <NavLink exact to={'/'} className='nav-link'>\n                                Home\n                            </NavLink>\n                        </li>\n                        <li className='nav-item'>\n                            <NavLink exact to={`/lights-out`} className='nav-link'>\n                                Lights out\n                            </NavLink>\n                        </li>\n                        <li className='nav-item'>\n                            <NavLink exact to={`/weather`} className='nav-link'>\n                                Weather\n                            </NavLink>\n                        </li>\n                    </ul>\n                </div>\n            </nav>\n        );\n    }\n}\nexport default NavbarFancy;\n","import React, { Component } from \"react\";\nimport Routes from './Routes';\nimport NavBarFancy from './NavBarFancy';\nimport \"./App.css\";\n\n/** Simple app that renders few interesting components */\n\nclass App extends Component {\n\n    render() {\n        return (\n            <div className='App'>\n                <NavBarFancy />\n                <Routes />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport \"bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\"\n\nimport './index.css';\nimport { BrowserRouter, HashRouter } from 'react-router-dom'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Solution to github pages routing problem (inclusion of \"basename\" parameter): \n// https://medium.com/@Dragonza/react-router-problem-with-gh-pages-c93a5e243819\nReactDOM.render(\n    <HashRouter basename={process.env.PUBLIC_URL}>\n        <App />\n    </HashRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}